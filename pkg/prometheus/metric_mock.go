// Code generated by MockGen. DO NOT EDIT.
// Source: imetric.go

// Package prometheus is a generated GoMock package.
package prometheus

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIMerchantMetric is a mock of IMerchantMetric interface
type MockIMerchantMetric struct {
	ctrl     *gomock.Controller
	recorder *MockIMerchantMetricMockRecorder
}

// MockIMerchantMetricMockRecorder is the mock recorder for MockIMerchantMetric
type MockIMerchantMetricMockRecorder struct {
	mock *MockIMerchantMetric
}

// NewMockIMerchantMetric creates a new mock instance
func NewMockIMerchantMetric(ctrl *gomock.Controller) *MockIMerchantMetric {
	mock := &MockIMerchantMetric{ctrl: ctrl}
	mock.recorder = &MockIMerchantMetricMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMerchantMetric) EXPECT() *MockIMerchantMetricMockRecorder {
	return m.recorder
}

// IncreaseRequestCnt mocks base method
func (m *MockIMerchantMetric) IncreaseRequestCnt(ctx context.Context, name, action, code string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseRequestCnt", ctx, name, action, code)
}

// IncreaseRequestCnt indicates an expected call of IncreaseRequestCnt
func (mr *MockIMerchantMetricMockRecorder) IncreaseRequestCnt(ctx, name, action, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseRequestCnt", reflect.TypeOf((*MockIMerchantMetric)(nil).IncreaseRequestCnt), ctx, name, action, code)
}

// MesureRequestDuration mocks base method
func (m *MockIMerchantMetric) MesureRequestDuration(ctx context.Context, name string, duration float64, lvb ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, name, duration}
	for _, a := range lvb {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "MesureRequestDuration", varargs...)
}

// MesureRequestDuration indicates an expected call of MesureRequestDuration
func (mr *MockIMerchantMetricMockRecorder) MesureRequestDuration(ctx, name, duration interface{}, lvb ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, name, duration}, lvb...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MesureRequestDuration", reflect.TypeOf((*MockIMerchantMetric)(nil).MesureRequestDuration), varargs...)
}

// RecordsCurrentValue mocks base method
func (m *MockIMerchantMetric) RecordsCurrentValue(ctx context.Context, name string, val float64, lvb ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, name, val}
	for _, a := range lvb {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RecordsCurrentValue", varargs...)
}

// RecordsCurrentValue indicates an expected call of RecordsCurrentValue
func (mr *MockIMerchantMetricMockRecorder) RecordsCurrentValue(ctx, name, val interface{}, lvb ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, name, val}, lvb...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordsCurrentValue", reflect.TypeOf((*MockIMerchantMetric)(nil).RecordsCurrentValue), varargs...)
}
